{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 CourierNewPSMT;\f2\fmodern\fcharset0 CourierNewPS-BoldItalicMT;
\f3\fmodern\fcharset0 CourierNewPS-ItalicMT;}
{\colortbl;\red255\green255\blue255;\red114\green44\blue253;\red0\green45\blue153;}
\margl1440\margr1440\vieww17300\viewh10020\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 \

\fs28 README Notes\ul \
\
\ulnone System Requirements\
\

\b0\fs24 1. Java 8 (1.8.0_77)\
2. Maven 3.3.9 
\b \
\

\fs28 Basic Instructions\
\

\b0\fs24 Clone the code-sample project from github
\b \
\

\fs28 Code Sample 1: Input Analyzer
\fs24 \
\
1. Compile and Execute with Maven\
\

\b0 The following commands will compile the code and execute the main method in the class 
\f1 code.sample.QuickRun.
\f0\b \
\

\b0 Use the following command to have run the InputAnalyzer with command line arguments.   The analyzer requires three pieces of data.  The first, an integer, to indicate the type of sample code to run (1 = InputAnalyzer).  The second is the input file path, and the third is the search string for the input.  Only the first value indicating the sample code type is required at the command line.  If no additional arguments are passed at the command line, then the analyzer will use the default values set in 
\f1 sample.properties
\f0 .  A test file (referenced in below command) has been provided with the project.  \
 
\b \

\b0 The following two commands would yield the same result\'85
\b \

\f1\b0 \

\f0 Base command that will use property file default values\
\

\f1 mvn compile exec:java -Dexec.mainClass=code.sample.QuickRun -Dexec.args="1"\
\

\f0 Command where all three arguments are entered on command line (
\i Note that a space is used to separate each arg
\i0 )
\f1 \
\
mvn compile exec:java -Dexec.mainClass=code.sample.QuickRun -Dexec.args="1 resources/test-input.txt foo"\
\

\f0 To use another file and search term, simply create a text file and then use that file path and search term for the command line arguments. \
\

\f1 #mvn compile exec:java -Dexec.mainClass=code.sample.QuickRun -Dexec.args="1 
\f2\i\b \cf2 your-input.txt
\f3\b0  
\f2\b your-search-term
\f1\i0\b0 \cf0 "\

\f0\i \

\i0 or update the property file values and then use the base command
\f1  \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\i \cf3 *Note the
\f3  
\f1\i0 mvn compile
\f0\i  command will generate class files under the projects /target folder, but a jar file will not be created and test cases will not be executed.
\i0\b \cf0 \
\
2. Execute with Java\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b0 \cf0 Run the following commands to clean the project and then package the code into a jar file.  \

\b \

\f1\b0 mvn clean\
\

\f0 then 
\f1 \
\
mvn package\
\

\f0 Note the package command will run any test cases and then create a jar file.  Once the jar is create, execute one of the following command.  As mentioned above you can also run the command with your own path and search term.\
\
- Execute the main() method with command line arguments
\f1 \
java -cp target/code-sample-1.0.jar code.sample.QuickRun "1" "resources/test-input.txt" "foo"\
# Ex. -cp target/code-sample-1.0.jar code.sample.QuickRun -Dexec.args="1" "
\f2\i\b \cf2 your-input.txt
\f1\i0\b0 \cf0 "
\f3\i \cf2  
\f1\i0 \cf0 "
\f2\i\b \cf2 your-search-term
\f1\i0\b0 \cf0 "\
\

\f0 - Execute the main() method using properties
\f1 \
java -cp target/code-sample-1.0.jar code.sample.QuickRun "1"\
\
\

\f0\b\fs28 Code Sample 2: File Scanner
\fs24 \
\
1. Compile and Execute with Maven\
\

\b0 The following commands will compile the code and execute the main method in the class 
\f1 code42.sample.QuickRun.
\f0\b \
\

\b0 Use the following command to run the FileScanner with command line arguments.  The scanner requires two pieces of data.  The first will indicate the type of sample code to run (2 = File Scanner ).  The second argument is the directory path to scan.  Only the first value indicating the sample code type is required at the command line.  If no additional arguments are passed at the command line, then the scanner will use the default directory set in 
\f1 sample.properties
\f0 .  \
\
The following two commands would yield the same result\'85
\b \

\f1\b0 \

\f0 Base command that will use property file default values\
\

\f1 mvn compile exec:java -Dexec.mainClass=code.sample.QuickRun -Dexec.args="2"\
\

\f0 Command where both arguments are entered on command line (
\i Note that a space is used to separate each arg
\i0 )
\f1 \
\
mvn compile exec:java -Dexec.mainClass=code.sample.QuickRun -Dexec.args="2 target"\
\

\f0 To use another directory, replace 
\f2\i\b \cf2 your path here
\f0\i0\b0 \cf0  with the path of choice.\

\b \

\f1\b0 mvn compile exec:java -Dexec.mainClass=code.sample.QuickRun -Dexec.args="2 
\f2\i\b \cf2 your path here
\f1\i0\b0 \cf0 "\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\i \cf3 *Note this command will generate class files under the projects /target folder, but a jar file will not be created and test cases will not be executed.
\i0\b \cf0 \
\
2. Execute with Java\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b0 \cf0 Run the following commands to clean the project and then package the code into a jar file.  \

\b \

\f1\b0 mvn clean\
\

\f0 then 
\f1 \
\
mvn package\
\

\f0 Note the package command will run any project test cases and then create a jar file.  Once the jar is create, execute one of the following command.  As mentioned above you can also run the command with your own directory.\
\
- Execute the FileScanner with command line arguments. 
\f1 \
# Ex. java -cp target/code-sample-1.0.jar code.sample.QuickRun "2" "
\f2\i\b \cf2 your path here
\f1\i0\b0 \cf0 " \
\

\f0 - Execute FileScanner using properties
\f1 \
java -cp target/code-sample-1.0.jar code.sample.QuickRun "2"
\f0\b \

\f1\b0 \

\f0\b\fs28 Code Sample 3: Multiplier
\fs24 \
\
1. Compile and Execute with Maven\
\

\b0 The following commands will compile the code and execute the main method in the class 
\f1 code42.sample.QuickRun.
\f0\b \
\

\b0 Use the following command to run the Math Multiplier with command line arguments.  The multiplier requires three pieces of data.  The first will indicate the type of sample code to run (3 = Multiplier).  The second and third arguments are the values to be multiplied.  All arguments must be provided.\

\b \

\f1\b0 \

\f0 Sample command\
\

\f1 mvn compile exec:java -Dexec.mainClass=code.sample.QuickRun -Dexec.args="3 100 -4"\
\

\f0\b 2. Execute with Java\
\

\b0 Run the following commands to clean the project and then package the code into a jar file.  \

\b \

\f1\b0 mvn clean\
\

\f0 then 
\f1 \
\
mvn package\
\

\f0 Note the package command will run any project test cases and then create a jar file.  Once the jar is create, execute one of the following command.  As mentioned above you can also run the command with your own directory.\
\
- Execute the multiplier with command line arguments. \

\f1 java -cp target/code-sample-1.0.jar code.sample.QuickRun "3" "100" "-4"
\f0 \

\f1 \
\
}